// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "./generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Tenant {
  id             String   @id @default(uuid())
  name           String
  slug           String   @unique
  logoUrl        String?
  plan           String?
  isActive       Boolean  @default(true)
  createdAt      DateTime @default(now())
  businessAreaId String?

  businessArea  BusinessArea?  @relation(fields: [businessAreaId], references: [id])
  users         User[]
  teams         Team[]
  contacts      Contact[]
  conversations Conversation[]
  labels        Label[]
  channels      Channel[]
}

enum UserRole {
  admin
  manager
  agent
}

model User {
  id         String   @id @default(uuid())
  tenantId   String
  tenant     Tenant   @relation(fields: [tenantId], references: [id])
  name       String
  email      String   @unique
  role       UserRole @default(agent)
  isActive   Boolean  @default(true)
  isVerified Boolean  @default(false)
  createdAt  DateTime @default(now())

  teamMemberships           TeamMember[]
  contactsCreated           Contact[]                 @relation("ContactCreatedBy")
  conversationsAssigned     Conversation[]            @relation("AssignedUser")
  labelsCreated             Label[]                   @relation("LabelCreatedBy")
  mentions                  Mention[]
  conversationlabelsCreated ConversationLabel[]       @relation("ConvLabelCreatedBy")
  conversationlabelsRemoved ConversationLabel[]       @relation("ConvLabelRemovedBy")
  participantAssignments    ConversationParticipant[] @relation("ParticipantAssignedBy")
  conversationParticipated  ConversationParticipant[]
}

model Team {
  id        String    @id @default(uuid())
  tenantId  String
  tenant    Tenant    @relation(fields: [tenantId], references: [id])
  name      String
  createdAt DateTime  @default(now())
  deletedAt DateTime?

  members       TeamMember[]
  conversations Conversation[]
}

enum TeamRole {
  admin
  member
}

model TeamMember {
  userId    String
  teamId    String
  role      TeamRole @default(member)
  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id])
  team Team @relation(fields: [teamId], references: [id])

  @@id([userId, teamId], name: "user_team_id")
}

model Contact {
  id          String   @id @default(uuid())
  tenantId    String
  tenant      Tenant   @relation(fields: [tenantId], references: [id])
  name        String?
  phone       String?
  email       String?
  origin      String?
  stage       String?
  createdById String?
  createdBy   User?    @relation("ContactCreatedBy", fields: [createdById], references: [id])
  createdAt   DateTime @default(now())

  conversations Conversation[]

  @@unique([phone, tenantId], name: "phone_tenant_unique")
}

enum ChannelType {
  whatsapp
  instagram
  facebook
  telegram
}

model Channel {
  id         String      @id @default(uuid())
  tenantId   String
  tenant     Tenant?     @relation(fields: [tenantId], references: [id])
  name       String
  type       ChannelType // 'whatsapp', 'instagram', 'facebook', etc.
  provider   String? // ex: '360dialog', 'meta', 'z-api'
  externalId String? // ID da API externa
  token      String? // Token de autenticação (pode ser encriptado)
  isActive   Boolean     @default(true)
  createdAt  DateTime    @default(now())
  metadata   Json?

  conversations Conversation[]
}

enum ConversationStatus {
  open
  in_queue
  closed
  bot
}

model Conversation {
  id                String             @id @default(uuid())
  tenantId          String
  tenant            Tenant             @relation(fields: [tenantId], references: [id])
  contactId         String
  contact           Contact            @relation(fields: [contactId], references: [id])
  channelId         String
  channel           Channel            @relation(fields: [channelId], references: [id])
  provider          String // 'whatsapp', 'instagram', 'facebook' 
  externalId        String // ID da conversa na API externa
  externalChannelId String // ID do canal na API externa
  status            ConversationStatus @default(in_queue) //'open', 'in_queue', 'closed', 'bot'
  assignedUserId    String?
  assignedUser      User?              @relation("AssignedUser", fields: [assignedUserId], references: [id])
  teamId            String?
  team              Team?              @relation(fields: [teamId], references: [id])
  lastMessageAt     DateTime?
  createdAt         DateTime           @default(now())
  closedAt          DateTime?

  messages     Message[]
  labels       ConversationLabel[]
  participants ConversationParticipant[]
  logs         ConversationLog[]

  @@index([externalId, externalChannelId])
}

enum MessageType {
  text
  image
  video
  audio
  document
  sticker
  location
  contact
  contacts
  button
  buttons
  template
  component
  list
}

enum SenderType {
  user
  bot
  system
  agent
}

enum MessageStatus {
  pending
  sent
  failed
  delivered
  read
}

enum MediaStatus {
  pending
  downloading
  downloaded
  failed
}

model Message {
  id               String        @id @default(uuid())
  conversationId   String
  conversation     Conversation  @relation(fields: [conversationId], references: [id])
  senderType       SenderType
  senderId         String?
  senderName       String?
  messageType      MessageType   @default(text)
  content          String?
  mediaId          String?
  mediaUrl         String?
  mediaCaption     String?
  mediaMimeType    String?
  mediaSize        Int?
  mediaDuration    Int?
  mediaStatus      MediaStatus   @default(pending) // 'pending', 'downloading', 'downloaded', 'failed'
  componentHeader  String?
  componentFooter  String?
  componentButtons Json?
  metadata         Json?
  reaction         String?
  isPrivate        Boolean       @default(false)
  replyToId        String?
  replyTo          Message?      @relation("MessageReply", fields: [replyToId], references: [id])
  status           MessageStatus @default(pending) // 'pending', 'sent', 'failed', 'delivered', 'read'
  externalId       String? // ID da mensagem na API externa
  createdAt        DateTime      @default(now()) //timestamp do provedor ou data de criação
  receivedAt       DateTime      @default(now()) //data de recebimento da mensagem
  mentions         Mention[]
  replies          Message[]     @relation("MessageReply")
}

model Label {
  id          String   @id @default(uuid())
  tenantId    String
  tenant      Tenant   @relation(fields: [tenantId], references: [id])
  name        String
  color       String?
  createdById String?
  createdBy   User?    @relation("LabelCreatedBy", fields: [createdById], references: [id])
  createdAt   DateTime @default(now())

  conversations ConversationLabel[]
}

model ConversationLabel {
  conversationId String
  labelId        String
  createdAt      DateTime     @default(now())
  createdById    String?
  removedAt      DateTime?
  removedById    String?
  createdBy      User?        @relation("ConvLabelCreatedBy", fields: [createdById], references: [id])
  removedBy      User?        @relation("ConvLabelRemovedBy", fields: [removedById], references: [id])
  conversation   Conversation @relation(fields: [conversationId], references: [id])
  label          Label        @relation(fields: [labelId], references: [id])

  @@id([conversationId, labelId])
}

model Mention {
  id          String   @id @default(uuid())
  messageId   String
  message     Message  @relation(fields: [messageId], references: [id])
  mentionedId String
  mentioned   User     @relation(fields: [mentionedId], references: [id])
  createdAt   DateTime @default(now())
}

model ConversationParticipant {
  conversationId String
  userId         String
  role           ParticipantRole @default(assignee) // 'assignee' ou 'sender'
  joinedAt       DateTime        @default(now())
  assignedById   String?

  assignedBy   User?        @relation("ParticipantAssignedBy", fields: [assignedById], references: [id])
  conversation Conversation @relation(fields: [conversationId], references: [id])
  user         User         @relation(fields: [userId], references: [id])

  @@id([conversationId, userId], name: "conversation_participant_id")
}

enum ParticipantRole {
  assignee
  sender
}

model ConversationLog {
  id             String       @id @default(cuid())
  conversation   Conversation @relation(fields: [conversationId], references: [id])
  conversationId String
  type           LogType
  from           String? // valor anterior (por exemplo, status anterior, agente anterior etc.)
  to             String? // valor novo (novo status, novo agente etc.)
  performedBy    String? // ID do agente ou do sistema que executou a ação [userId, 'system', 'bot']
  comment        String? // comentário opcional ou motivo da mudança
  metadata       Json? // dados adicionais sobre a ação
  createdAt      DateTime     @default(now())

  @@index([conversationId, createdAt])
}

enum LogType {
  CREATED
  STATUS_CHANGE
  AGENT_CHANGE
  TEAM_CHANGE
  LABEL_ADDED
  LABEL_REMOVED
  CUSTOM
}

model BusinessArea {
  id        String   @id @default(uuid())
  name      String   @unique
  createdAt DateTime @default(now())

  tenants Tenant[]
}
