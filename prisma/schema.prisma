// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "./generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Tenant {
  id          String         @id @default(uuid())
  name        String
  slug        String         @unique
  logoUrl     String?
  plan        String?
  isActive    Boolean        @default(true)
  createdAt   DateTime       @default(now())

  users          User[]
  teams          Team[]
  contacts       Contact[]
  conversations  Conversation[]
  labels         Label[]
  channels Channel[]
}

enum UserRole {
  admin
  manager
  agent
}

model User {
  id         String   @id @default(uuid())
  tenantId   String
  tenant     Tenant   @relation(fields: [tenantId], references: [id])
  name       String
  email      String   @unique
  role       UserRole   @default(agent)
  isActive   Boolean  @default(true)
  isVerified Boolean  @default(false)
  createdAt  DateTime @default(now())

  teamMemberships       TeamMember[]
  contactsCreated       Contact[]     @relation("ContactCreatedBy")
  conversationsAssigned Conversation[] @relation("AssignedUser")
  labelsCreated         Label[]       @relation("LabelCreatedBy")
  mentions          Mention[]
}

model Team {
  id         String   @id @default(uuid())
  tenantId   String
  tenant     Tenant   @relation(fields: [tenantId], references: [id])
  name       String
  createdAt  DateTime @default(now())

  members        TeamMember[]
  conversations  Conversation[]
}

enum TeamRole {
  admin
  member
}

model TeamMember {
  userId    String
  teamId    String
  role      TeamRole   @default(member)
  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id])
  team Team @relation(fields: [teamId], references: [id])

  @@id([userId, teamId])
}

model Contact {
  id           String   @id @default(uuid())
  tenantId     String
  tenant       Tenant   @relation(fields: [tenantId], references: [id])
  name         String?
  phone        String?
  email        String?
  origin       String?
  stage        String?
  createdById  String?
  createdBy    User?    @relation("ContactCreatedBy", fields: [createdById], references: [id])
  createdAt    DateTime @default(now())

  conversations Conversation[]

  @@unique([phone, tenantId], name: "phone_tenant_unique")
}

enum ChannelType {
  whatsapp
  instagram
  facebook
  telegram
}

model Channel {
  id         String   @id @default(uuid())
  tenantId   String
  tenant     Tenant?   @relation(fields: [tenantId], references: [id])
  name       String
  type       ChannelType   // 'whatsapp', 'instagram', 'facebook', etc.
  provider   String?  // ex: '360dialog', 'meta', 'z-api'
  externalId String?  // ID da API externa
  token      String?  // Token de autenticação (pode ser encriptado)
  isActive   Boolean  @default(true)
  createdAt  DateTime @default(now())
  metadata   Json?

  conversations Conversation[]
}


enum ConversationStatus {
  open
  in_queue
  closed
  bot
}

model Conversation {
  id               String   @id @default(uuid())
  tenantId         String
  tenant           Tenant   @relation(fields: [tenantId], references: [id])
  contactId        String
  contact          Contact  @relation(fields: [contactId], references: [id])
  channelId        String
  channel          Channel @relation(fields: [channelId], references: [id])
  provider         String // 'whatsapp', 'instagram', 'facebook' 
  externalId       String // ID da conversa na API externa
  externalChannelId String // ID do canal na API externa
  status           ConversationStatus @default(in_queue)  //'open', 'in_queue', 'closed', 'bot'
  assignedUserId   String?
  assignedUser     User?    @relation("AssignedUser", fields: [assignedUserId], references: [id])
  teamId           String?
  team             Team?    @relation(fields: [teamId], references: [id])
  lastMessageAt    DateTime?
  createdAt        DateTime @default(now())

  messages         Message[]
  labels           ConversationLabel[]

  @@index([externalId, externalChannelId])
}

enum MessageType {
  text
  image
  video
  audio
  document
  sticker
  location
  contact
  button
  template
  component
  list
}

enum SenderType {
  user
  bot
  system
  agent
}
enum MessageStatus {
  pending
  sent
  failed
  delivered
  read
}

enum MediaStatus {
  pending
  downloading
  downloaded
  failed
}

model Message {
  id                String   @id @default(uuid())
  conversationId    String
  conversation      Conversation @relation(fields: [conversationId], references: [id])
  senderType        SenderType
  senderId          String?
  senderName        String?
  messageType       MessageType  @default(text)
  content           String?
  mediaId           String?
  mediaUrl          String?
  mediaCaption      String?
  mediaMimeType     String?
  mediaSize         Int?
  mediaDuration     Int?
  mediaStatus       MediaStatus @default(pending) // 'pending', 'downloading', 'downloaded', 'failed'
  componentHeader   String?
  componentFooter   String?
  componentButtons  Json?
  metadata          Json?
  reaction          String?
  isPrivate         Boolean  @default(false)
  status            MessageStatus @default(pending) // 'pending', 'sent', 'failed', 'delivered', 'read'
  externalId        String? // ID da mensagem na API externa
  createdAt         DateTime @default(now()) //timestamp do provedor ou data de criação
  receivedAt        DateTime @default(now()) //data de recebimento da mensagem
  mentions          Mention[]
}

model Label {
  id           String   @id @default(uuid())
  tenantId     String
  tenant       Tenant   @relation(fields: [tenantId], references: [id])
  name         String
  color        String?
  createdById  String?
  createdBy    User?    @relation("LabelCreatedBy", fields: [createdById], references: [id])
  createdAt    DateTime @default(now())

  conversations ConversationLabel[]
}

model ConversationLabel {
  conversationId String
  labelId        String
  createdAt      DateTime @default(now())

  conversation   Conversation @relation(fields: [conversationId], references: [id])
  label          Label        @relation(fields: [labelId], references: [id])

  @@id([conversationId, labelId])
}

model Mention {
  id         String   @id @default(uuid())
  messageId  String
  message    Message  @relation(fields: [messageId], references: [id])
  mentionedId String
  mentioned  User     @relation(fields: [mentionedId], references: [id])
  createdAt  DateTime @default(now())
}
